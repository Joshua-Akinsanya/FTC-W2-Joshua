@use "variables" as *;
@use "sass:map";

@mixin flex($direct: row, $gap: 0, $justify: center, $align: center) {
    display: flex;
    flex-direction: $direct;
    gap: $gap;
    justify-content: $justify;
    align-items: $align;
}

@mixin nav-top() {
    height: max($nav-height, 3em);//3em in case root font size is too large
    padding: 0 0 0 25px;
    border-bottom: solid 1px #FFFFFF29;
    font-size: 1.125rem;
}

@mixin rounded($pad: 1em) {
    border-radius: 9999px;
    padding: $pad;
}

@mixin primary-btn($color: $white, $bg-color: $primary-color-mid) {
    @include flex();
    border-radius: 9999px;
    color: $color;
    background-color: $bg-color;
    padding: 0.5em 1em;
    text-align: center;
}

@mixin secondary-btn() {
    @include primary-btn();
    color: white;
    background-color: #1A202C;
}

@mixin text-style($size: 1rem, $wt: 400, $color: null, $align: left, $line-ht: 1.5) {
    font: {
        size: $size;
        weight: $wt;
    }
    line-height: 1.5;
    text-align: $align;
    @if $color != null {
        color: $color;
    }
}

@mixin white-bg() {
    background-color: $white;
    color: $primary-color-dark;
}

@mixin custom-li($url) {
    background-image: url($url);
    background-repeat: no-repeat;
    background-position: 0 5px;
    background-size: 1rem;
    padding-left: 30px;
}

// size values could be tablet or desktop
// check variables file for breakpoints map

@mixin respond($size) {
    $width: map.get($breakpoints, $size);
    @if $width {
        @media (min-width: $width) {
            @content;
        }
    }
    @else {
        @warn "`#{$size}` is not a valid breakpoint. Check breakpoints in variables file for all possible values"
    }
}